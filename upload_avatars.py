# by Kelly Williams
# 5/4/19
# Program to update user avatars in Staffbase
# Written for Staffbase Tech Test

import json
import requests
import os

#store api token, api url base, and headers
api_token = 'NWNjZjJlMDcwZDJhZWE0YmYzMDUwNjQ1OjI4fUpWXzgkYXpJS1AsNXFebnose0t7NiteUTF1TnE1UEFzTnsscEsqTUNsZHImWk17YkgzSHljbTZxeCRfVEg='
api_url_base = 'https://backend.staffbase.com/api/'
basic_headers = {'Authorization':'Basic {0}'.format(api_token),'Content-Type':'application/json'}
media_headers = {'Authorization':'Basic {0}'.format(api_token)}

# upload_images takes a list of local image paths
# uploads those images one at a time
# upon success, stores the image's new, hosted url
# returns these urls
def upload_images(folder, paths):
  api_url = '{0}media'.format(api_url_base)
  # list to store the uploaded images' urls
  urls = []
  for i in range(len(paths)):
    path = paths[i]
    files = {"type":"image","file":open("{0}/{1}".format(folder,path),"rb")}
    response = requests.post(api_url,headers=media_headers,files=files)
    if response.status_code == 200:
      img_data = json.loads(response.content.decode('utf-8'))
      urls.append(img_data['resourceInfo']['url'])
      #optional success message, can be commented out
      print("Success! Uploaded {0} of {1}.".format(i+1,len(paths)))
    else:
      print("Upload error")
  return urls


# update_profile_pictures takes a list of ID (users to update)
# also takes a list of urls to images
# ids and imgs must be stored in the same order
# (this will happen automatically if the urls are generated by upload_images)
# uses the id and url to update a user's avatar
def update_profile_pictures(ids,img_urls):
  for i in range(len(ids)):
    api_url = '{0}users/{1}'.format(api_url_base,ids[i])
    avatar_update = {"avatar":img_urls[i]}
    reset = {"avatar": "None"}
    response = requests.put(api_url,headers=basic_headers,json=avatar_update)
    if response.status_code == 200:
      #optional success message, can be commented out
      print("Success! Updated avatar {0} of {1}.".format(i+1,len(ids)))
    else:
      print("Error updating profile picture for user {0}.".format(ids[i]))
      print(response.status_code)

#name of local folder housing images
folder = "images"

# assume images are saved as userId.fileType
# ex: 5ccda07a1947250a80f7b54e.png
# iterate over folder to retrieve all image paths
img_paths = os.listdir(folder)

# remove file extension for list of relevant IDs
ids = [path[:-4] for path in img_paths]

# call upload_images function with all the images from our folder
photo_urls = upload_images(folder,img_paths)

#call update_profile_pictures function with all user ids and their corresponding images (represented by its url)
update_profile_pictures(ids,photo_urls)
